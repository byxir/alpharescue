// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id                   String           @id @default(cuid())
    name                 String?
    email                String?          @unique
    emailVerified        DateTime?
    image                String?
    accounts             Account[]
    sessions             Session[]
    role                 Role             @default(USER)
    configurations       Configuration[]
    favoriteRaffles      FavoriteRaffle[]
    referralCode         String?
    referralRedirectPool Int?

    communityMember Boolean @default(false)
    raffleBotUser   Boolean @default(false)

    CommunitySubscription CommunitySubscription?
    RaffleBotSubscription RaffleBotSubscription?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime @default(now())

    @@unique([identifier, token])
}

model CommunitySubscription {
    id      String   @id @default(cuid())
    expires DateTime
    user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId  String   @unique
}

model RaffleBotSubscription {
    id             String   @id @default(cuid())
    expires        DateTime
    rafflesLeft    Int      @default(5)
    rafflesPerDay  Int      @default(5)
    maxNumAccounts Int      @default(150)
    user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId         String   @unique
}

model Configuration {
    id           String  @id @default(cuid())
    firstAccount Int?
    lastAccount  Int?
    exceptions   String?
    user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId       String

    @@index([userId])
}

model FavoriteRaffle {
    id           String @id @default(cuid())
    trueRaffleId String
    user         User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId       String

    @@index([userId])
}

enum Role {
    USER
    ADMIN
    DISCOUNT
    REFERRER
}
